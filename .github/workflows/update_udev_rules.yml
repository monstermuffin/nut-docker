name: Update udev rules file

on:
  push:
    paths: [Dockerfile]

jobs:
  dump_udev:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Build image
        uses: docker/build-push-action@v6
        with:
          tags: nut-upsd:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Dump udev rules
        id: dump_rules
        run: |
          docker run --rm nut-upsd:latest dump-udev-rules > rules
          # Assert that the rules file is not empty
          if [ ! -s rules ]; then
            # ::error file={name},line={line},endLine={endLine},title={title}::{message}
            echo "::error title=Failed to dump udev rules::Rules file was found empty."
            exit 1
          fi
          echo "rules=$(cat rules)" >> $GITHUB_OUTPUT

      - name: Update udev rules
        env:
          RULES_FILE: example_confs/etc/udev/rules.d/62-nut-usbups.rules
        run: |
          echo "${{ steps.dump_rules.outputs.rules }}" > "$RULES_FILE"

          # Yoinked from my slightly cursed workflow here: https://github.com/rHomelab/Red-DiscordBot-Docker/blob/main/.github/workflows/redbot-args-update.yml.
          if git status | grep -q 'Changes not staged for commit' ; then
            git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add "$RULES_FILE"
            git commit -m "Update NUT udev rules"
            git push

            echo "# NUT udev rules have been updated." >> $GITHUB_STEP_SUMMARY
          else
            echo -e "# NUT udev rules are already up to date.\n\nSee [${RULES_FILE##*/}](https://github.com/${GITHUB_REPOSITORY}/blob/main/${RULES_FILE})" >> $GITHUB_STEP_SUMMARY
          fi
